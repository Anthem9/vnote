vnote_backup_file_826537664 C:/Users/83770/Documents/vnote_notebooks/vnotebook/黑客攻防技术宝典Web实战篇/Web渗透测试流程.md
# Web渗透测试流程
## 信息搜集
### 解析应用程序
#### 枚举应用程序内容与功能
* 配置浏览器，使用``Burp``作为本地代理服务器

* 以常规方式浏览整个应用程序，访问发现的每一个链接``URL``，提交每一个表单并执行全部多阶段功能。
* 尝试在``JavaScript``激活与禁用、``cookie``激活与禁用的情况下进行浏览。
* （许多应用程序能够处理各种浏览器配置，可以获取应用程序内的不同内容和代码路径。）

* 检查由代理服务器/爬虫工具生成的站点地图，确定手动浏览时没有发现的所有应用程序内容或功能。
* 确定爬虫如何枚举每一项内容，例如，在``Burp Spider``中，检查“链接自”（``Linked From``）的详细内容。
* 通过浏览器访问这些内容，以使代理服务器/爬虫工具检查服务器响应，从而确定其他内容。
* 继续递归执行上述步骤，直到无法再确定其他内容或功能

* 另外，还可以要求工具以已经枚举的所有内容为基础，主动抓取站点内容。
* 首先，请确定任何危险的或可能会中断应用程序会话的URL，并配置爬虫，将它们排除在抓取范围之外。
* 运行爬虫并检查它发现的结果以查找其他所有内容。

#### 发现隐藏的内容
* 手动提出一些访问有效与无效资源的请求，并确定服务器如何处理无效资源。

* 使用**用户指定的抓取生成的站点地图**作为自动查找隐藏内容的基础

* 自动提出访问应用程序内已知存在的每个目录或路径中常用文件名和目录的请求。
* 使用``Burp Intruder``或一段定制脚本，结合**常用文件名**和**目录词汇表**，迅速生成大量请求。
* 如果已经确定应用程序处理访问无效资源请求的特定方式（如自定义的``file not found``页面），应配置``Intruder``或脚本突出显示这些结果，以便将其忽略。
* 上一条是为了防止文件不存在但响应状态码是``200``的情况

* 收集从服务器收到的响应，并手动检查这些响应以确定有效的资源。

* 反复执行这个过程，直到发现新内容

* 使用御剑应该也是可以的

#### 通过公布的内容进行推测
* 检查用户指定的浏览与基本蛮力测试获得的结果。
* 编译枚举出的所有子目录名称、文件词干和文件拓展名列表。

* 检查这些列表，确定应用程序使用的所有命名方案。
* 根据命名方案和推测出的命名习惯，制作新的文件名和目录名的列表，重新进行爆破。

* 检查所有客户端代码，如HTTP和JavaScript，确定任何与隐藏服务器端内容有关的线索。
* 这些代码包括与**受保护**或**没有建立链接的功能**有关的HTML注释以及包含禁用SUBMIT元素的HTML表单等。
* 参考服务器端包含文件之类的内容。

* 把已经枚举出的内容添加到其他根据这些列表项推测出来的名称中，并将文件拓展名列表添加到txt、bak、src、inc和old这些常用拓展名中，它们也许能够披露现有页面备份版本的来源以及与所使用的开发语言有关的拓展名，如.Java和.cs；这些拓展名可能揭示已经被编译到现有页面的来源文件

* 搜索开发者工具和文件编辑器不经意建立的临时文件。
* 例如.DS_Store文件，其中包含一个OS X目录索引，或者file.php~1，它是编辑file.php时临时创建的文件，或者大量软件工具使用的.tmp文件。

* 进一步执行自动操作，结合目录、文件词干和文件拓展名列表请求大量潜在的资源。
* 例如，在特定的目录中请求每个文件词干和每个文件拓展名；
* 或者请求每个目录名作为已知目录的子目录

* 如果确定应用程序使用一种统一的命名方案，考虑在此基础上执行更有针对性的蛮力测试。
* 例如，如果已知AddDocument.jsp和ViewDocument.jsp存在，就可以建立一个操作列表（编辑、删除、新建等）并请求XxxDocument.jsp。
* 此外，还可以建立项目类型（用户、账户、文件等）并请求AddXxx.jsp。

* 以新枚举的内容和模式作为深入用户指定抓取操作的基础，反复执行上述每一个步骤，继续执行自动内容查找。
* 所采取的操作只受到想象力、可用时间以及在所针对的应用程序中发现隐藏内容的重要性的限制。

#### 利用公共信息
* Google Hacking
* 收集开发者在因特网发表的贴子
    * 列出所发现的与目标应用程序及其开发有关的每一个姓名和电子邮件地址，其中应包括所有已知的开发者、在HTML源代码中发现的姓名、在公司主要Web站点联系信息部分发现的姓名以及应用程序本身披露的所有姓名（如管理职员）
    * 使用上文描述的搜索技巧，搜索发现的每一个姓名，查找他们在因特网论坛上发表的所有问题和答案。分析发现的所有信息，了解与目标应用程序功能或漏洞有关的线索。

#### 应用程序页面与功能路径
* 确定所有通过在参数中提交某一功能的名称（如/admin.jsp?action=editUser）而非通过请求代表哪个功能的一个特殊页面（如/admin/editUser.jsp）访问应用程序功能的情况。

* 修改上述用于查找URL相关内容的自动化技巧，利用它处理应用程序使用的内容-访问机制。
* 例如，如果应用程序使用参数指定servlet和方法名称，首先确定它在请求一个无效servlet或方法以及请求一个有效方法与其他无效参数时的行为。
* 设法确定表示“触点”（即有效servlet和方法）的服务器响应的特点。
* 如果可能，想出办法分阶段攻击这个问题，首先枚举servlet，然后枚举其中的方法。
* 对于查找URL相关内容的技巧使用相似的方法，列出常见项目，通过从实际观察到的名称进行推断，增加这些项目，并根据项目生成大量请求。

* 如果可能，根据功能路径绘制一幅应用程序内容图，说明所有被枚举的功能和逻辑路径以及他们之间的依赖关系。

#### 发现隐藏的参数
* 使用常用调试参数名称（调试、测试、隐藏、来源等）和常用值（真、是、开通和1等）列表，向一个已知的应用程序页面和功能提出大量请求。
* 重复执行这一操作，直到浏览完所有名/值对组合。
* 在POST请求的URL查询字符串和消息主体中插入增加的参数。
* 可以使用多组有效载荷和“集束炸弹（cluster bomb）”攻击类型，通过Burp Intruder执行这一测试。
* 监控收到的全部响应，确定任何表明增加的参数给应用程序处理过程造成影响的异常。
* 根据可用时间，在许多不同的页面或功能中查找隐藏的参数。
* 选择开发人员最有可能在其中执行调试逻辑的功能，如登录、搜索、文件上传和下载等

### 分析应用程序
* 确定全部用户输入入口点，包括URL、查询字符串参数、POST数据、cookie和其他由应用程序处理的HTTP消息头。

* 分析应用程序使用的查询字符串格式。
* 如果未使用标准格式，设法了解它如何通过URL提交参数。
* 几乎所有定制方案仍然使用名/值模型的某种变化形式，因此要设法了解名/值对如何被封装到已经确定的非标准URL中。

* 确定任何向应用程序处理过程引入用户可控制或其他第三方数据的带外通道。

* 查看应用程序返回的HTTP服务器旗标。
* 注意，再某些情况下，应用程序的不同区域由不同的后端组件处理，因此可能会收到不同的Server消息头。

* 检查所有定制HTTP消息头或HTML源代码注释中包含的任何其他软件标识符。

* 运行Httprecon工具识别Web服务器

* 如果获得关于Web服务器和其他组件的详细信息，搜索其使用的软件版本，确定在发动攻击时可供利用的所有漏洞。（18章）

* 分析应用程序URL列表，确定任何看似重要的文件拓展名、目录或其他提供服务器使用技术相关线索的内容。

* 分析应用程序发布的全部会话令牌的名称，确定其使用的技术

* 使用常用技术列表或Google推测服务器所使用的技术，或者查找其他明显使用相同技术的Web站点和应用程序。

* 在Google上搜索可能属于第三方软件组件的任何不常见cookie、脚本、HTTP消息头名称。
* 如果发现使用相同组件的应用程序，对其进行分析，确定该组件支持的任何其他功能和参数，并确定目标应用程序是否具有这些功能、使用这些参数。
* 注意，由于品牌定制，相同第三方组件在每个应用程序中的外观可能截然不同，但其核心功能（包括脚本和参数名称）往往并无变化。
* 如有可能，下载并安装组件，对其进行分析以充分了解它的功能、查找其中存在的所有漏洞。
* 同时查询已知漏洞库，确定相关组件中存在的所有已知漏洞。

### 确定服务器端功能
#### 仔细分析请求
* 检查提交到应用程序的全部参数的名称和参数值，了解它们支持的功能
* 从程序员的角度考虑问题，想象应用程序可能使用了哪些服务器端机制和技术来执行能够观察到的行为。

#### 推测应用程序的行为
* 确定应用程序中任何可能包含与其他区域内部结构和功能有关的线索的位置。
* 把猜测画成逻辑图

#### 隔离独特的应用程序行为
* 记录其使用的标准GUI外观、参数命名或导航机制与应用程序的其他部分不同的任何功能。
* 同时记录可能在后续添加的功能，包括调试功能、CAPTCHA控件、使用情况跟踪和第三方代码。
* 对这些区域进行全面的检查，不要假定在应用程序的其他区域实施的标准防御在这些区域也同样适用。

### 小结
* 了解应用程序执行的核心功能和使用的主要安全机制。
* 确定通常与常见漏洞有关的应用程序功能和行为特点。
* 在公共漏洞数据库（如www.osvdb.org）中检查任何第三方代码，以确定任何已知问题。
* 制定攻击计划，优先考虑最可能包含漏洞的功能，以及最严重的漏洞。


---------------第五章------------

## 攻击核心安全机制



