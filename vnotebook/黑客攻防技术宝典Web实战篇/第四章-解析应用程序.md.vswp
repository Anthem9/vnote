vnote_backup_file_826537664 C:/Users/83770/Documents/vnote_notebooks/vnotebook/黑客攻防技术宝典Web实战篇/第四章-解析应用程序.md
# 第四章-解析应用程序
经验丰富的专家能够迅速对所有功能区域进行分类，参照各种实例查找不同类型的漏洞，同时花费大量时间测试其他特定区域，以确定高风险的问题。
## 枚举内容与功能
### Web抓取
* Burp Suite Spider
* 使用爬虫爬取所有站点
### 用户指定的抓取
* Burp Suite Target 用户指定访问，比爬虫更安全可靠，更新站点地图
### 发现隐藏的内容
* 备份文件
* 包含Web根目录下（或根目录外）完整文件快照的备份档案，可以使用它迅速确定应用程序的所有内容与功能。？？？？？？？？？
* 部署在服务器上，用于测试目的但尚未在主应用程序中建立链接的新功能。
* 对用户不可见的功能
* 尚未被删除的旧版本文件。其中可能包含能利用的旧版本漏洞。
* 配置和包含敏感数据（如数据库证书）的文件。
* 编译现有应用程序功能的源文件。
* 极端情况下，源代码中可能包含用户名和密码等信息，但更可能提供有关应用程序状态的信息。如果某个位置出现“测试此功能”或类似的短语，应立即从此处开始探查漏洞。
* 包含有效用户名、会话令牌、被访问的URL以及所执行操作等敏感信息的日志文件
#### 蛮力技巧
* Burp Intruder
* 使用Cheatsheet暴力枚举目录和文件
#### 通过公布的内容进行推测
* 许多应用程序对其内容与功能使用某种命名方案。
* 通过应用程序中已经存在的资源进行推断，可以调整自动枚举操作，提高发现其他隐藏内容的可能性。
* 比如说文件或目录名的第一个的字母是否大写等

* 检查这些列表，确定应用程序使用的所有命名方案。
* 例如，如果有些页面的名称为AddDocument.jsp和ViewDocument.jsp，那么可能还有叫做EditDocument.jsp和RemoveDocument.jsp的页面。
* 通常，只需要查看几个示例，就能推测出开发者的命名习惯。
* 根据其个人风格，开发者可能采用各种命名方法，如冗长式（AddNewUser.asp）、简洁式（AddUser.asp）、缩写式（AddUsr.asp）或更加模糊的命名方式（AddU.asp）。
* 了解开发者使用的命名方式有助于猜测出尚未确定的内容的准确名称。

* 有时候，不同内容的命名方案使用数字和日期作为标识符，通过它们可轻易推测出隐藏的内容。
* 静态内容常常采用这种命名方式。
* 例如，如果一家公司得Web站点含有AnnualReport2009.pdf和AnnualReport2010.pdf这两个文件得链接，应该可以立即确定接下来得报告名称。

* 检查所有客户端代码，如HTTP和JavaScript，确定任何与隐藏服务器端内容有关的线索。
* 这些代码包括与**受保护**或**没有建立链接的功能**有关的HTML注释以及包含禁用SUBMIT元素的HTML表单等。
* 通常，注释由生成Web内容的软件自动生成，或者由应用程序运行的平台生成。

* 参考服务端包含文件之类的内容也特别有用。
* 这些文件可被公众下载，并且可能包含高度敏感的信息（如数据库连接字符串和密码）。

* 另外，开发者的注释中可能包含各种有用的信息，如数据库名称、后端组件引用、SQL查询字符串等。
* 厚客户端组件（如Java applet和ActiveX控件）也可能包含可供利用的敏感数据。
* 15章详细说

#### 利用公共信息
* 搜索引擎
* Web档案

* 开发人员和其他人在因特网论坛上发表的帖子是提供目标应用程序有用信息的另一个公共来源。
* 这些信息包括应用程序使用的技术、执行的功能、在开发过程中遇到的问题、已知的安全缺陷、向其提交以帮助解决疑难的配置与日志文件，甚至是源代码摘录。
#### 利用Web服务器
* 18章
* 使用Nikto和Wikto

### 应用程序页面与功能路径
* 根据功能参数寻找页面。
* 各种功能一般通过不同URL访问，后者通常是执行该项功能的服务器端脚本的名称。
* 请求参数（位于URL查询字符串或POST请求主体中）并不告知应用程序执行何种功能，而是告知应用程序在执行功能时使用哪些信息。
* 有鉴于此，建立基于URL的解析方法可对应用程序的功能进行有效分类。
### 发现隐藏的参数
* 例如，如果在URL的查询字符串中加入``debug=true``参数，应用程序的运作方式就会发生改变：它可能会关闭某些输入确认检查，允许用户避开某些访问控制或者在响应中显示详细的调试信息。
* 许多时候，我们无法从应用程序的任何内容直接推断它如何处理这个参数（例如，它并不在超链接的URL中插入``debug=false``）。
* 只有通过猜测许多值，才能在提交正确的值之后了解这个参数产生的效果。

## 分析应用程序
* 应用程序的核心功能：用于特定目的时可利用它执行的操作。
* 其他较为外围的应用程序行为，包括**站外链接**、**错误消息**、**管理与日志功能**、**重定向使用**等。
* 核心安全机制及其运作方式，特别是**会话状态**、**访问控制**以及**验证机制**与**支持逻辑**（**用户注册**、**密码修改**、**账户恢复**等）。
* 应用程序处理用户提交的输入所有不同位置：每个**URL**、**查询字符串参数**、**POST数据**、**cookie**以及类似内容。
* 客户端使用的技术，包括**表单**、**客户端脚本**、**厚客户端组件**（Java applet、ActiveX控件和Flash）和**cookie**。
* 服务器端使用的技术，包括**静态与动态页面**、**使用的请求参数类型**、**SSL使用**、**Web服务器软件**、**数据库交互**、**电子邮件系统**和其他后端组件。
* 任何可收集到的、**关于服务器端应用程序内部结构与功能的其他信息**（**客户端可见的功能和行为的后台传输机制**）。
### 确定用户输入入口点
* 每个URL字符串，包括查询字符串标记。
* URL查询字符串中提交的每个参数
* POST请求主体中提交的每个参数
* 每个cookie
* 极少情况下可能包括由应用程序处理的其他所有HTTP消息头，特别是``User-Agent``、``Referer``、``Accept``、``Accept-Language``和``Host``消息头。
#### URL文件路径
* 在使用REST风格的URL的应用程序中，查询字符串之前的URL部分实际上可以作为数据参数，并且和进入点一样重要，因为用户输入就是查询字符串本身
* 典型的REST风格的URL可以采用以下格式：
```url
http://eis/shop/browse/electronics/iPhone3G/
```
* 在这个示例中，字符串``electronics``和``iPhone3G``应被视为存储搜索功能的参数

#### 请求参数
* 一些应用程序并不对这些参数使用标准的``name=value``格式，而是使用定制的方案。
* 定制方案采用非标准查询字符串标记和字段分隔符，甚至可能在参数数据中嵌入其他数据方案（如XML）。
```url
/dir/file;foo=bar&foo2=bar2;
/dir/file?foo=bar$foo2=bar2;
/dir/file/foo%3dbar%26foo2%3dbar2;
dir/foo.bar/file;
/dir/foo=bar/file;
/dir/file?param=foo:bar;
/dir/file?data=%3cfoo%3ebar%3c%2ffoo%3e%3cfoo2%3ebar2%3c%2ffoo2%3e
```
* 例如，测试上面最后一个URL时，如果忽略定制格式，认为其仅包含一个名为data的参数，因而提交各种攻击有效载荷作为这个参数的值，对其进行简单处理，那么可能遗漏很多漏洞
* 相反，如果详细分析它使用定制格式并将有效载荷提交到嵌入的XML数据字段中，立即就会发现严重缺陷，如SQL注入或路径遍历。

#### HTTP消息头
* 一般来说服务器可能处理或不处理HTTP消息头
* 如果处理了，就增加了一个用户输入的入口
* 可使用Burp Intruder发送不同请求，如果返回不同页面，就证明服务器端接收了这些数据并做了处理
#### 带外通道
* 处理并显示通过SMTP接收到的电子邮件消息的Web邮件应用程序；
* 具有通过HTTP从其他服务器获取内容功能的发布应用程序；
* 使用网络嗅探器收集数据并通过Web应用程序界面显示这些数据的入侵检测应用程序；
* 任何提供由非浏览器用户代理使用的API接口（如果通过此接口处理的数据与主Web应用程序共享）的应用程序，如移动电话应用程序。

### 确定服务器端技术
#### 提取版本信息
* HTTP Server消息头
* 建立HTML页面的模板
* 定制的HTTP消息头
* URL查询字符串参数

#### HTTP指纹识别
* 使用Httprecon工具扫描

#### 文件拓展名
* asp -- Microsoft Active Server Pages
* aspx -- Micrsoft ASP.NET
* jsp -- Java Server Pages
* cfm -- Cold Fusion
* php -- PHP语言
* d2w -- WebSphere
* pl -- Perl语言
* py -- Python语言
* dll -- 通常为编译型本地代码（C或C++）
* nsf或ntf -- Lotus Domino

* 使用前面描述的自动化内容查找技巧，我们能够请求大量常见的文件拓展名，并迅速确定服务器是否执行了任何相关技术。
#### 目录名称
* servlet -- Java servlet
* pls -- Oracle Application Server PL/SQL 网关
* cfdocs或cfide -- Cold Fusion
* SilverStream -- SilverStream Web服务器
* WebObjecs或{function}.woa -- Apple WebObjects
* rails -- Ruby on Rails
#### 会话令牌
* JSESSIONID -- Java平台
* ASPSESSIONID -- Microsoft IIS服务器
* ASP.NET_SessionId -- Microsoft ASP.NET
* CFID/CFTOKEN -- Cold Fusion
* PHPSESSID -- PHP
#### 第三方代码组件
* 可能开源代码的第三方组件

### 确定服务器端功能
#### 仔细分析请求
#### 推测应用程序的行为
#### 隔离独特的应用程序行为
* 许多可靠或成熟的应用程序采用一致的框架来防止各种类型的攻击
* 在这类情况下，最可能发现漏洞的区域，是应用程序中后续添加或“拼接”而常规安全框架不会处理的部分。

### 解析受攻击面
* 客户端确认 -- 服务器没有采用确认检查。
* 数据库交互 -- SQL注入
* 文件上传与下载 -- 路径遍历漏洞、保存型跨站脚本
* 显示用户提交的数据 -- 跨站点脚本
* 动态重定向 -- 重定向与消息头注入攻击
* 社交网络功能 -- 用户名枚举、保存型跨站点脚本
* 登录 -- 用户名枚举、脆弱密码、能使用蛮力
* 多阶段登录 -- 登录缺陷
* 会话控制 -- 可推测出的令牌、令牌处理不安全
* 访问控制 -- 水平权限和垂直权限提升
* 用户伪装功能 -- 权限提升
* 使用明文通信 -- 会话劫持、收集证书和其他敏感数据
* 站外链接 -- Referer消息头中查询字符串参数泄露
* 外部系统接口 -- 处理会话与/或访问控制的快捷方式
* 错误消息 -- 信息泄露
* 电子邮件交互 -- 电子邮件与命令注入
* 本地代码组件或交互 -- 缓冲区溢出
* 使用第三方应用程序组件 -- 已知漏洞
* 已确定的Web服务器软件 -- 常见配置薄弱环节、已知软件程序缺陷
